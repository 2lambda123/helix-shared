{"meta:license":["Copyright 2019 Adobe. All rights reserved.","This file is licensed to you under the Apache License, Version 2.0 (the \"License\");","you may not use this file except in compliance with the License. You may obtain a copy","of the License at http://www.apache.org/licenses/LICENSE-2.0","","Unless required by applicable law or agreed to in writing, software distributed under","the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS","OF ANY KIND, either express or implied. See the License for the specific language","governing permissions and limitations under the License."],"$id":"https://ns.adobe.com/helix/shared/property","$schema":"http://json-schema.org/draft-07/schema#","type":"object","title":"Property","oneOf":[{"title":"Single-Value Property","description":"The property in an index. The value will be stored as a single cardinal value.","type":"object","properties":{"select":{"type":"string","description":"A CSS selector expression that selects nodes in the HTML (DOM) or Markdown (MDAST) syntax tree"},"value":{"type":"string","description":"A ES6 template literal expression that extracts the value from the matching node(s) to be stored in the index"},"faceted":{"type":"boolean","description":"Whether to enable faceted search on this property","default":false}},"additionalProperties":false,"required":["select","value"]},{"title":"Multi-Value Property","description":"The property in an index. The value will be stored as a list of values","type":"object","properties":{"select":{"type":"string","description":"A CSS selector expression that selects nodes in the HTML (DOM) or Markdown (MDAST) syntax tree"},"values":{"type":"string","description":"A ES6 template literal expression that extracts the values from the matching nodes to be stored in the index"},"faceted":{"type":"boolean","description":"Whether to enable faceted search on this property","default":false}},"additionalProperties":false,"required":["select","values"]}],"description":"Each property in the search index is made up of two parts:\n1. a `select` expression that selects nodes in the DOM or MDAST of the document to be indexed\n2. a `value` or `values` expression that specifies how to extract values from the selected nodes.\n\nWhen using `value`, a single cardinal value will be stored in the index, when using `values`, an array of values will be stored.\n\nFor example:\n\n```yaml\nproperties:\n  title:\n    select: main > .title\n    value: textContent(el)\n  topics:\n    select: main > .topic\n    values: textContent(el)\n```\n\nThe `value` or `values` epression is now a proper javascript-like\nexpression, using [jesp](http://jsep.from.so) to parse the tree it supports functions, literals and variables so far.\n\nFollowing variables and functions can be used in these expressions:\n\n- `el` – the list of all matching DOM elements\n- `logger` – a Helix Log instance\n- `parseTimestamp` – helper function to parse timestamps from a string\n- `attribute` – retrieves the value of an attribute from an element\n- `textContent` – retrieves the plain text content of an element\n- `match` \n- `words`"}
